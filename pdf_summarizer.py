# Authorization: Bearer OPENAI_API_KEY

# /////////////////////////////////SETUP////////////////////////////////////////
import openai
import os
import openai_requests
from dotenv import load_dotenv

# Load environment variables from .env file
from dotenv import load_dotenv, find_dotenv
_ = load_dotenv(find_dotenv()) #reads local .env file

# Get value of OPENAI_API_KEY environment variable
openai_api_key = os.getenv("OPENAI_API_KEY")

# Set the API key for the OpenAI API client
openai.api_key = openai_api_key

# Use the OpenAI API client to make API requests

# function uses the OpenAI API client to generate text based on a prompt using 
# a language model specified by the model parameter (default is gpt-3.5-turbo)
def get_completion(prompt, model="gpt-3.5-turbo"):
    # user prompt (initialized as a list)
    # 2 key-value pairs: role (indicates message is from 'user') and content.
    messages = [{"role": "user", "content": prompt}]
    # response from the api call
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0, # degree of randomness of the model's output
        # (with a value of 0 meaning the output will be deterministic).
    )
    # response.choices is a list of possible completions generated by the model 
    # number of choices returned can be controlled by the "max_tokens" parameter
    # by deafult, max_tokens is set to 1 i.e. the highest scoring completion
    # .message contains the text of the completion
    # ["content"] is used to extract this text as a string
    return response.choices[0].message["content"]

    # Note: response.choices[0] item also contains additional metadata about the generated completion like:
            # 1. log-likelihood score, 
            # 2. list of tokens representing the completion.

# /////////////////////////////////TEST1_DELIMITERS////////////////////////////////////////
# Use delimiters to clearly indicate distinct parts of the input
# Delimiters can be anything like: ```, """, < >, `<tag> </tag>`, `:`

text_a = f"""
Respond to the following prompt with 5 sentences.\
"For Vergil, pietas serves the same social function \
as faith serves in the Gospel of Mark." Agree or disagree.  \
"""
# creates python multi-line f-string with prompt as the interpolated variable '{}'
# prompt : includes dynamic informatyion which is not known ahead of time, like:
# 1. user input
# 2. data from a database/external source
prompt = f"""
Answer the text delimited by triple backticks with a small paragraph.
```{text_a}```
"""
response = get_completion(prompt)
print(response)

# /////////////////////////////////TEST2_STRUCTURED_OUTPUT////////////////////////////////////////
# JSON, HTML

prompt = f"""
Generate a list of three made-up book titles along \ 
with their authors and genres. 
Provide them in JSON format with the following keys: 
book_id, title, author, genre.
"""
response = get_completion(prompt)
print(response)

# /////////////////////////////////TEST3_CONDITIONS_SATISFIED////////////////////////////////////////
# Check assumptions required to do the task, and if they are not satisfied, 
# indicate and stop the task completion attempt.

text_1 = f"""
Making a cup of tea is easy! First, you need to get some \ 
water boiling. While that's happening, \ 
grab a cup and put a tea bag in it. Once the water is \ 
hot enough, just pour it over the tea bag. \ 
Let it sit for a bit so the tea can steep. After a \ 
few minutes, take out the tea bag. If you \ 
like, you can add some sugar or milk to taste. \ 
And that's it! You've got yourself a delicious \ 
cup of tea to enjoy.
"""
prompt = f"""
You will be provided with text delimited by triple quotes. 
If it contains a sequence of instructions, \ 
re-write those instructions in the following format:

Step 1 - ...
Step 2 - …
…
Step N - …

If the text does not contain a sequence of instructions, \ 
then simply write \"No steps provided.\"

\"\"\"{text_1}\"\"\" 
"""
# multi-line f-string with text_1 as the interpolated variable {}
response = get_completion(prompt)
print("Completion for Text 1:")
print(response)


# /////////////////////////////////TEST4_FEW_SHOT_PROMPTING////////////////////////////////////////

prompt = f"""
Your task is to answer in a consistent style.

<child>: Teach me about patience.

<grandparent>: The river that carves the deepest \ 
valley flows from a modest spring; the \ 
grandest symphony originates from a single note; \ 
the most intricate tapestry begins with a solitary thread.

<child>: Teach me about resilience.
"""
response = get_completion(prompt)
print(response)


